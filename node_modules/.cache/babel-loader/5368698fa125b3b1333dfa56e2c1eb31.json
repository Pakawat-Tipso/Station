{"ast":null,"code":"/*!\n * promptpay-qr\n * JavaScript library to generate PromptPay QR code\n * <https://github.com/dtinth/promptpay-qr>\n *\n * Refs:\n * - https://www.blognone.com/node/95133\n * - Ehttps://www.emvco.com/emv-technologies/qrcodes/\n *\n * @license MIT\n */\nvar crc = require('crc');\n\nvar ID_PAYLOAD_FORMAT = '00';\nvar ID_POI_METHOD = '01';\nvar ID_MERCHANT_INFORMATION_BOT = '29';\nvar ID_TRANSACTION_CURRENCY = '53';\nvar ID_TRANSACTION_AMOUNT = '54';\nvar ID_COUNTRY_CODE = '58';\nvar ID_CRC = '63';\nvar PAYLOAD_FORMAT_EMV_QRCPS_MERCHANT_PRESENTED_MODE = '01';\nvar POI_METHOD_STATIC = '11';\nvar POI_METHOD_DYNAMIC = '12';\nvar MERCHANT_INFORMATION_TEMPLATE_ID_GUID = '00';\nvar BOT_ID_MERCHANT_PHONE_NUMBER = '01';\nvar BOT_ID_MERCHANT_TAX_ID = '02';\nvar BOT_ID_MERCHANT_EWALLET_ID = '03';\nvar GUID_PROMPTPAY = 'A000000677010111';\nvar TRANSACTION_CURRENCY_THB = '764';\nvar COUNTRY_CODE_TH = 'TH';\n\nfunction generatePayload(target, options) {\n  target = sanitizeTarget(target);\n  var amount = options.amount;\n  var targetType = target.length >= 15 ? BOT_ID_MERCHANT_EWALLET_ID : target.length >= 13 ? BOT_ID_MERCHANT_TAX_ID : BOT_ID_MERCHANT_PHONE_NUMBER;\n  var data = [f(ID_PAYLOAD_FORMAT, PAYLOAD_FORMAT_EMV_QRCPS_MERCHANT_PRESENTED_MODE), f(ID_POI_METHOD, amount ? POI_METHOD_DYNAMIC : POI_METHOD_STATIC), f(ID_MERCHANT_INFORMATION_BOT, serialize([f(MERCHANT_INFORMATION_TEMPLATE_ID_GUID, GUID_PROMPTPAY), f(targetType, formatTarget(target))])), f(ID_COUNTRY_CODE, COUNTRY_CODE_TH), f(ID_TRANSACTION_CURRENCY, TRANSACTION_CURRENCY_THB), amount && f(ID_TRANSACTION_AMOUNT, formatAmount(amount))];\n  var dataToCrc = serialize(data) + ID_CRC + '04';\n  data.push(f(ID_CRC, formatCrc(crc.crc16xmodem(dataToCrc, 0xffff))));\n  return serialize(data);\n}\n\nfunction f(id, value) {\n  return [id, ('00' + value.length).slice(-2), value].join('');\n}\n\nfunction serialize(xs) {\n  return xs.filter(function (x) {\n    return x;\n  }).join('');\n}\n\nfunction sanitizeTarget(id) {\n  return id.replace(/[^0-9]/g, '');\n}\n\nfunction formatTarget(id) {\n  const numbers = sanitizeTarget(id);\n  if (numbers.length >= 13) return numbers;\n  return ('0000000000000' + numbers.replace(/^0/, '66')).slice(-13);\n}\n\nfunction formatAmount(amount) {\n  return amount.toFixed(2);\n}\n\nfunction formatCrc(crcValue) {\n  return ('0000' + crcValue.toString(16).toUpperCase()).slice(-4);\n}\n\nmodule.exports = generatePayload;","map":{"version":3,"sources":["/Users/mac/Desktop/station-react-firebase/node_modules/promptpay-qr/index.js"],"names":["crc","require","ID_PAYLOAD_FORMAT","ID_POI_METHOD","ID_MERCHANT_INFORMATION_BOT","ID_TRANSACTION_CURRENCY","ID_TRANSACTION_AMOUNT","ID_COUNTRY_CODE","ID_CRC","PAYLOAD_FORMAT_EMV_QRCPS_MERCHANT_PRESENTED_MODE","POI_METHOD_STATIC","POI_METHOD_DYNAMIC","MERCHANT_INFORMATION_TEMPLATE_ID_GUID","BOT_ID_MERCHANT_PHONE_NUMBER","BOT_ID_MERCHANT_TAX_ID","BOT_ID_MERCHANT_EWALLET_ID","GUID_PROMPTPAY","TRANSACTION_CURRENCY_THB","COUNTRY_CODE_TH","generatePayload","target","options","sanitizeTarget","amount","targetType","length","data","f","serialize","formatTarget","formatAmount","dataToCrc","push","formatCrc","crc16xmodem","id","value","slice","join","xs","filter","x","replace","numbers","toFixed","crcValue","toString","toUpperCase","module","exports"],"mappings":"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","sourcesContent":["/*!\n * promptpay-qr\n * JavaScript library to generate PromptPay QR code\n * <https://github.com/dtinth/promptpay-qr>\n *\n * Refs:\n * - https://www.blognone.com/node/95133\n * - Ehttps://www.emvco.com/emv-technologies/qrcodes/\n *\n * @license MIT\n */\n\nvar crc = require('crc')\n\nvar ID_PAYLOAD_FORMAT = '00'\nvar ID_POI_METHOD = '01'\nvar ID_MERCHANT_INFORMATION_BOT = '29'\nvar ID_TRANSACTION_CURRENCY = '53'\nvar ID_TRANSACTION_AMOUNT = '54'\nvar ID_COUNTRY_CODE = '58'\nvar ID_CRC = '63'\n\nvar PAYLOAD_FORMAT_EMV_QRCPS_MERCHANT_PRESENTED_MODE = '01'\nvar POI_METHOD_STATIC = '11'\nvar POI_METHOD_DYNAMIC = '12'\nvar MERCHANT_INFORMATION_TEMPLATE_ID_GUID = '00'\nvar BOT_ID_MERCHANT_PHONE_NUMBER = '01'\nvar BOT_ID_MERCHANT_TAX_ID = '02'\nvar BOT_ID_MERCHANT_EWALLET_ID = '03'\nvar GUID_PROMPTPAY = 'A000000677010111'\nvar TRANSACTION_CURRENCY_THB = '764'\nvar COUNTRY_CODE_TH = 'TH'\n\nfunction generatePayload (target, options) {\n  target = sanitizeTarget(target)\n\n  var amount = options.amount\n  var targetType = (\n    target.length >= 15 ? (\n      BOT_ID_MERCHANT_EWALLET_ID\n    ) : target.length >= 13 ? (\n      BOT_ID_MERCHANT_TAX_ID\n    ) : (\n      BOT_ID_MERCHANT_PHONE_NUMBER\n    )\n  )\n\n  var data = [\n    f(ID_PAYLOAD_FORMAT, PAYLOAD_FORMAT_EMV_QRCPS_MERCHANT_PRESENTED_MODE),\n    f(ID_POI_METHOD, amount ? POI_METHOD_DYNAMIC : POI_METHOD_STATIC),\n    f(ID_MERCHANT_INFORMATION_BOT, serialize([\n      f(MERCHANT_INFORMATION_TEMPLATE_ID_GUID, GUID_PROMPTPAY),\n      f(targetType, formatTarget(target))\n    ])),\n    f(ID_COUNTRY_CODE, COUNTRY_CODE_TH),\n    f(ID_TRANSACTION_CURRENCY, TRANSACTION_CURRENCY_THB),\n    amount && f(ID_TRANSACTION_AMOUNT, formatAmount(amount))\n  ]\n  var dataToCrc = serialize(data) + ID_CRC + '04'\n  data.push(f(ID_CRC, formatCrc(crc.crc16xmodem(dataToCrc, 0xffff))))\n  return serialize(data)\n}\n\nfunction f (id, value) {\n  return [ id, ('00' + value.length).slice(-2), value ].join('')\n}\n\nfunction serialize (xs) {\n  return xs.filter(function (x) { return x }).join('')\n}\n\nfunction sanitizeTarget (id) {\n  return id.replace(/[^0-9]/g, '')\n}\n\nfunction formatTarget (id) {\n  const numbers = sanitizeTarget(id)\n  if (numbers.length >= 13) return numbers\n  return ('0000000000000' + numbers.replace(/^0/, '66')).slice(-13)\n}\n\nfunction formatAmount (amount) {\n  return amount.toFixed(2)\n}\n\nfunction formatCrc (crcValue) {\n  return ('0000' + crcValue.toString(16).toUpperCase()).slice(-4)\n}\n\nmodule.exports = generatePayload\n"]},"metadata":{},"sourceType":"script"}